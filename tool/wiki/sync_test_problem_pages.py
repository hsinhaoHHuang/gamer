#!/bin/python3
import sys
import os
import subprocess



#====================================================================================================
# Global constants
#====================================================================================================
EXAMPLE_DIR = "../../example/test_problem/"
WIKI_DIR    = "../../doc/wiki/Test-Problem-related/"
OUT_MD      = "../../doc/wiki/Test-Problems.md"



#====================================================================================================
# Functions
#====================================================================================================
def CopyAndAddWarning( filename, target ):
    warning_msg  = r''
    warning_msg += r'\> [!CAUTION]\n'
    warning_msg += r'\> Please do not edit this file(page) manually since the workflow will overwrite your changes.\n'
    warning_msg += r'\>\n'
    warning_msg += r'\> This file(page) is automatically generated by the workflow `Update test problem wiki page` using the script `tool/wiki/sync_test_problem_pages.py`.\n'
    warning_msg += r'\>\n'
    warning_msg += r'\> The workflow is triggered by push changes to any of `example/test_problem/*/*/README.md` and `tool/wiki/sync_test_problem_pages.py`.\n'
    warning_msg += r'\n'

    status = subprocess.call( ["cp", filename, target] )
    if status != 0: print("Error")
    status = subprocess.call( ["sed", "-i", "1i "+warning_msg, target] )
    if status != 0: print("Error")
    return



#====================================================================================================
# Main
#====================================================================================================
new_test = False

ALL_PATHS = {}
for model in os.listdir( EXAMPLE_DIR ):
    if model == "Template":
        ALL_PATHS[model] = EXAMPLE_DIR+model
        continue
    tests = os.listdir( EXAMPLE_DIR+model )
    ALL_PATHS[model] = {}
    for test in tests:
        file_name = model+"/"+test+"/README.md"
        ALL_PATHS[model][test] = EXAMPLE_DIR+file_name

        if not os.path.isfile( WIKI_DIR+"Test-Problems:-"+test+".md" ):
            new_test = True
            print("New test problem: %s"%test)
            CopyAndAddWarning( EXAMPLE_DIR+file_name, WIKI_DIR+"Test-Problems:-"+test+".md" )
            continue

        print("Copying test problem (%5s/%-30s) README.md to %s"%(model, test, WIKI_DIR))
        CopyAndAddWarning( EXAMPLE_DIR+file_name, WIKI_DIR+"Test-Problems:-"+test+".md" )

if not new_test: exit() # no new test problem

# output markdown file with new test problem
with open( OUT_MD, 'w' ) as f:
    param_str_format = '| %-100s | %15s | %15s | %15s | %s |\n'

    f.write( '> [!CAUTION]\n' )
    f.write( '> Please do not edit this file(page) manually since the workflow will overwrite your changes.\n' )
    f.write( '> \n' )
    f.write( '> This file(page) is automatically generated by the workflow `Update test problem wiki page` using the script `tool/wiki/sync_test_problem_pages.py`.\n' )
    f.write( '> \n' )
    f.write( '> The workflow is triggered by push changes to any of `example/test_problem/*/*/README.md` and `tool/wiki/sync_test_problem_pages.py`.\n' )
    f.write( '\n' )
    f.write( 'Before going to the test problem, please check out the demos in [[Quick Start]].\n' )
    f.write( '\n' )

    #f.write( "[[ %s \\| %s ]]\n"%("Template", "Test-Problems:-Template") )
    #f.write( "\n" )
    for model, p in ALL_PATHS.items():
        if model == "Template": continue
        f.write( "# %s tests\n"%model )
        for test in sorted(list(ALL_PATHS[model].keys())):
            f.write( "[[ %s \\| %s ]]\n"%(test, "Test-Problems:-%s"%test) )
            f.write( "\n" )
        f.write( "\n" )
